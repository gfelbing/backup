# Copyright 2016 Georg Felbinger
#
# This file is part of the github project gfelbing/backup.
# It should not be executed itself, use `backup prepare`!
# 
# gfelbing/backup is free software:
# you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
# 
# gfelbing/backup is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with gfelbing/backup.
# If not, see http://www.gnu.org/licenses/.

DEVICE=$1
VGNAME=vg-backup
LVNAME=lv-backup
LVCONFIG=lv-config
LUKSNAME=luks-backup
BACKUPNAME=$(hostname)

echo "Creating the physical lvm volume on $DEVICE"
sudo pvcreate "$DEVICE"

echo "Creating the lvm volume group $VGNAME on $DEVICE"
sudo vgcreate "$VGNAME" "$DEVICE"

echo "Creating the lvm logical volume $LVNAME on $VGNAME"
sudo lvcreate -L 16M -n "$LVCONFIG" "$VGNAME"
sudo lvcreate -l 100%FREE -n "$LVNAME" "$VGNAME"

echo "Write random data to $LVNAME for better encryption. This can take some time."
sudo badblocks -c 10240 -s -w -t random -v "/dev/$VGNAME/$LVNAME"

echo "Creating config and a passphrase and save it gpg-encrypted"
sudo mkfs.ext4 /dev/$VGNAME/$LVCONFIG
MOUNTCONFIG=$(mktemp -d)
sudo mount "/dev/$VGNAME/$LVCONFIG" "$MOUNTCONFIG"
sudo touch "$MOUNTCONFIG/config" "$MOUNTCONFIG/pass"
sudo chown "$UID:$UID" "$MOUNTCONFIG/config" "$MOUNTCONFIG/pass"
read -rp "For which gpg2 USER-ID should the passphrase (generated in next step) be encrypted? " GPGUID
echo "GPGUID=\"$GPGUID\"" > "$MOUNTCONFIG/config"
echo "BACKUPNAME=\"$BACKUPNAME\"" >> "$MOUNTCONFIG/config"
pwgen -cnys1 50 | gpg2 -r "$GPGUID" -e > "$MOUNTCONFIG/pass"

echo "Creating $LUKSNAME mapping"
echo -e "$(gpg2 -r "$GPGUID" -d "$MOUNTCONFIG/pass" 2> /dev/null)" | sudo cryptsetup luksFormat "/dev/$VGNAME/$LVNAME"
echo -e "$(gpg2 -r "$GPGUID" -d "$MOUNTCONFIG/pass" 2> /dev/null)" | sudo cryptsetup luksOpen "/dev/$VGNAME/$LVNAME $LUKSNAME"

echo "Create and mount btrfs into encrypted volume"
sudo mkfs.btrfs "/dev/mapper/$LUKSNAME"
MOUNTBACKUP=$(mktemp -d)
sudo mount -t btrfs "/dev/mapper/$LUKSNAME" "$MOUNTBACKUP"

echo "Creating btrfs subvolume $MOUNTBACKUP/$BACKUPNAME"
sudo btrfs subvolume create "$MOUNTBACKUP/$BACKUPNAME"

echo "Unmounting..."
sudo umount "$MOUNTCONFIG"
sudo umount "$MOUNTBACKUP"

echo "Closing encrypted filesystem"
sudo cryptsetup luksClose "$LUKSNAME"

echo "Setup done. You should backup now."

